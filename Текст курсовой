МИНИСТЕРСТВО ОБРАЗОВАНИЯ И НАУКИ РОССИЙСКОЙ ФЕДЕРАЦИИ
ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ БЮДЖЕТНОЕ ОБРАЗОВАТЕЛЬНОЕ 
УЧРЕЖДЕНИЕ ВЫСШЕГО ПРОФЕССИОНАЛЬНОГО ОБРАЗОВАНИЯ
ИВАНОВСКИЙ ГОСУДАРСТВЕННЫЙ ХИМИКО-ТЕХНОЛОГИЧЕСКИЙ 
УНИВЕРСИТЕТ


КАФЕДРА ЭКОНОМИКИ И ФИНАНСОВ





Курсовая работа
по дисциплине «Базы данных»
на тему: База данных такси










                                                                              Студент: Шашков Денис
				                          
                                                                              Курс/группа: гр. 2-47
						
                                                                              Руководитель: Константинов Е.С.
									










ИВАНОВО  2014 г.

 
Содержание

Введение 
1. Создание таблиц 
2. Создание запросов 
3. Создание отчетов 
4. Создание форм 
5. Создание макросов 
Заключение 
Список литературы 

 
Введение

Проектируемая база данных предназначена для работников частного предприятия, оказывающего населению услуги такси, 
и позволяет им повысить эффективность своей работы за счет систематизации и быстрого поиска нужной им информации. 
Это сильно упрощает работу, т.к. отпадает необходимость просматривать горы бумаг в поисках нужной информации, 
рассчитывать стоимость путевого листа каждому водителю и отчеты о работе начальству.
В БД должны храниться сведения о водителях: ФИО, позывной, номер водительского удостоверения, дата выдачи 
водительского удостоверения, а также находится ли водитель в отпуске, на больничном или уволен; 
сведения об автомобилях: государственный номер, марка, цвет, год выпуска, № свидетельства о регистрации 
транспортного средства, собственник, а также находится ли автомобиль в ремонте; сведения о путевых листах: 
№ путевого листа, позывной водителя, даты открытия и закрытия путевого листа, государственный номер автомобиля; 
сведения о заказах: номер заказа, дата и время поступления, адрес клиента, водитель выполняющий заказ, 
отметка о выполнении.
Диспетчер такси должен иметь возможность получить следующие сведения:
– какие автомобили находятся на линии, а какие в ремонте;
– сведения о заказах с разбивкой по водителям;
– сведения о количестве отработанных часов каждым водителем и, соответственно, стоимости его путевки 
(стоимость путевки рассчитывается по 20 руб. за час работы, остальные денежные средства остаются водителю).
Для создания базы данных используем СУБД Microsoft Access. Создание любой базы данных начинается с выбора структуры 
базы данных. В нашем случае удобнее использовать пять таблиц с данными. Это будут две таблицы с данными по заказам: 
внутригородские и междугородние, таблица данных по водителям, таблица данных на автомобили и таблица учета путевых 
листов.
Далее сделаем несколько запросов на выборку по различным параметрам, а также отчеты к ним. Например, сделаем запрос, 
выдающий сведения о водителя и автомобилях, находящихся на линии; запрос, вычисляющий время работы по путевому листу, 
а также его стоимость и др.
Для удобства работы с данными создадим несколько форм и кнопки переходов между ними. Для вызова формы 
(и не только формы) можно также воспользоваться макросом. Для демонстрации данной возможности создадим макрос вызова 
главной формы и формы ввода сведений об автомобилях. Также создадим макрос распечатки стоимости путевых листов.

 
1. Создание таблиц

Итак, создаем таблицу. Все базы данных содержат одну или несколько таблиц. Таблица — совокупность записей. 
Столбцы в таблице называются полями, а строки — записями. Количество записей в таблице ограничивается емкостью 
жесткого диска. Допустимое количество полей в записи — 255. У каждой таблицы имеется уникальное имя. В базе данных 
должна быть представлена отдельная таблица для каждого большого набора элементов, например, для записей о сотрудниках, 
о заказах клиентов, о способах поставки и поставщиках. Не следует дублировать данные в нескольких таблицах. 
Это распространенная ошибка, которой легко избежать, правильно разработав структуру базы данных. Создавать таблицы 
можно тремя способами:
	с помощью мастера (если при создании таблицы требуются подсказки об элементах, которые следует в нее включать);

	в режиме конструктора (если вы точно знаете, какие параметры полей вам нужны). В отличие от мастера, этот способ н
е предполагает пошагового процесса и требует больше усилий по отладке таблицы;
	посредством ввода данных и определения полей в режиме таблицы. Э
тот способ применяется при необходимости настроить простую таблицу и быстро ввести данные. 
Однако в отличие от работы с мастером или в режиме конструктора при этом нельзя задать многие параметры таблицы.
Создаем таблицу «Водители». Для создания таблицы используем конструктор, как более подробный метод (рисунок 1). 
В таблице зададим следующие поля: «Позывной», «Фамилия», «Имя», «Отчество», «Номер ВУ», «Дата выдачи ВУ», 
«На больничном», «В отпуске», «Уволен». Поле «Позывной» имеет формат счетчика. Следующие поля – текстовые, 
«Дата выдачи ВУ» имеет формат даты/времени, а последние три поля – логические.

 
 
Рисунок 1 – Окно создания таблицы

 
Рисунок 2 – Ввод параметров поля таблицы

Вводим названия полей и их подробный формат (рисунки 2, 3).

 
Рисунок 3 – выбор типа данных в поле таблицы

Сохраняем структуру таблицы под именем «Водители» и начинаем заполнять значения полей – записи (рисунок 4).

 
 
Рисунок 4 – Заполнение таблицы данными

Запись — полный набор данных об определенном объекте: клиенте, книге, событии и т. п. Запись отображается 
как строка таблицы. Каждая запись состоит из отдельных полей. Каждая запись в каждой таблице должна быть уникальна. 
Чтобы отличить одну запись от другой, в таблицы можно добавить поле первичного ключа. Ключевым полем станет поле 
«Позывной», т.к. позывной уникален для каждого водителя. Это поле имеет формат счетчика. После завершения ввода 
данных таблица закрывается.
После создания всех таблиц, необходимо построить схему данных (рис.5).

 
Рисунок 5 – Схема данных

2. Создание запросов

Переходим на следующую вкладку – «Запросы». Запросы – объекты, позволяющие пользователю получить нужные данные из 
одной или нескольких таблиц. Для создания запроса можно использовать бланк QBE (Query By Example – запрос по образцу)
или написать инструкцию SQL. Можно создавать запросы на выборку, обновление, удаление или добавление данных. 
С помощью запросов можно также создавать новые таблицы, используя данные из одной или нескольких таблиц.
Строить запросы также можно с помощью мастера и с помощью конструктора. Снова выбираем конструктор (рисунок 6).

 
Рисунок 6 – Окно создания запроса

Для построения запросов нужно добавить таблицы, по которым будет выполняться запрос. В нашем случае пять таблиц, 
выберем из них те, в которых содержатся необходимые для запроса данные (рисунок 7).

 
Рисунок 7 – Окно добавления таблицы

После добавления таблицы необходимо выбрать поля, по которым делается запрос, и задать необходимые условия отбора 
(рисунок 8).

 
 
Рисунок 8 – Задание условий отбора

Например, требуется, чтобы на экран выводился список междугородних заказов для конкретного водителя.
Для создания запросов, когда требуется посмотреть данные для определенного водителя в столбце «Позывной» 
можно задать условие для ввода позывного водителя в квадратных скобках «[Задайте позывной водителя]». В этом случае 
при открытии запроса программа попросит ввести нужный позывной (рисунок 9).

 
Рисунок 9 – Запуск запроса «Междугородние заказы по водителям»

Создание запроса «На линии»:

 
 
Создание запроса «Автомобили в ремонте»:

 

Создание запроса «Стоимость путевого листа»:

 

3. Создание отчетов

Отчет – это гибкое и эффективное средство для организации данных при выводе на печать и вместе с тем это способ 
вывода данных из базы на печать в том виде, в котором требуется пользователю. С помощью отчета можно расположить 
информацию на листе в удобном для пользователя виде с различным оформлением. В отчете данные преобразуются в 
форматированный документ. Конструирование отчета не только позволяет вывести информацию в удобном и привлекательном 
виде, но и комбинировать данные нескольких таблиц, а также упорядочивать записи таблицы на основании данных других 
таблиц. При его создании вы расставляете специальные маркеры (называемые элементами управления).
С помощью отчетов можно группировать данные, выполнять с ними различные действия, добавлять заголовки и другие 
элементы форматирования с целью сделать отображение данных более понятным.
Создав отчет, можно сохранить данные в этом формате, при этом каждый раз при печати его структура будет сохраняться,
даже если данные были изменены.
Создадим отчеты по запросам «На линии», «Стоимость путевого листа», «Автомобили в собственности предприятия», 
а также по таблице «Заказы» с группировкой по водителям.
Создаем отчет с помощью мастера отчетов, а затем в режиме конструктора откорректируем расположение элементов, для 
более приемлемого вида и оформления (рисунки 10, 11).

 
Рисунок 10 – Выбор элементов, отображаемых в отчете

 
Рисунок 11 – Отчет в режиме конструктора

 
4. Создание форм

Форма – объект, предназначенный в основном для ввода данных, отображения их на экране или управления работой 
приложения. Обычно в этом режиме выводятся данные из записей, а текстовые поля, управляющие кнопки, картинки и 
прочие служебные объекты облегчают просмотр и обработку данных. Другое преимущество форм перед режимом таблицы — 
возможность отображать в одной форме данные из нескольких таблиц.
Формы обеспечивают наиболее гибкий способ ввода, редактирования, просмотра и удаления данных и фактически являются 
шаблонами, управляющими отображением информации. Форма позволяет отображать одновременно все поля одной или 
нескольких записей. Оптимально построенная форма может вмещать несколько десятков полей на одном экране, 
а если полей намного больше, то для каждой записи можно создать многостраничную форму. Можно создать форму-меню для 
вызова других форм, таблиц, запросов или отчетов. В форме каждое поле можно разместить в точно заданном месте, 
выбрать для него цвет или заливку и добавить элементы управления текстом для эффективного ввода данных.
Для создания формы можно также воспользоваться конструктором или мастером создания форм. Т.к. конструктор все же 
дает более широкие возможности, воспользуемся им в очередной раз. Создадим, во-первых, титульный лист в виде 
формы и свяжем его с главной формой, предназначенной для работы с приложением. С помощью конструктора и панели 
управляющих элементов добавим на заготовку формы «Водители» все необходимые данные из таблицы «Водители», а также, 
чтобы предусмотреть добавление новых записей в таблицу, кнопки «Добавить запись», «Сохранить запись» и «Удалить запись». 
Этих кнопок вполне достаточно для того, чтобы редактировать записи в таблице 
«Водители». Кроме того, добавим кнопку для поиска нужной записи (рисунок 12, 13).

 
 
Рисунок 12 – Форма «Водители»

 
Рисунок 13 – Создание кнопок на форме

Отчеты предварительно можно создать с помощью мастера или конструктора на вкладке «Отчеты», а затем аналогично 
создать удобную форму для просмотра отчетов (рисунок 14), можно также создать форму для просмотра самих запросов, 
но отчеты смотреть все-таки удобнее, тем более, что их можно сразу и распечатать при желании с помощью кнопки 
«Печать» на панели инструментов. Можно было бы в принципе создать и на форме кнопку печати отчетов, но, по-моему, 
ни к чему слишком уж перегружать форму кнопками, ведь кнопка «Печать» и так доступна в данном окне.

 
 
Рисунок 14 – Форма «Отчеты»

После того, как форма для работы с базой данных создана можно задать автозапуск формы при открытии базы 
данных для удобства работы. Выполняется это следующим образом: Сервис → Параметры запуска → Вывод формы/страницы → ОК. 
(рисунок 15, 16)

 
Рисунок 15 – Выбор параметров запуска базы данных

 
Рисунок 16 – Окно параметров запуска
 
5. Создание макросов

Макрос в Access представляет собой структуру, состоящую из одной или нескольких макрокоманд, которые 
выполняются либо последовательно, либо в порядке, заданном определенными условиями. Набор макрокоманд в 
Access очень широк, с помощью макросов можно реализовать многое. Каждая макрокоманда имеет определенное имя и, 
возможно, один или несколько аргументов, которые задаются пользователем. Например, при использовании макрокоманды 
Открыть Форму (OpenForm) в качестве аргументов необходимо задать, по крайней мере, имя открываемой формы и режим 
вывода ее на экран. Существует еще один очень простой способ ввода макрокоманды, которым мы и воспользуемся. 
Допустим, нужно создать макрос, который должен открывать форму «Главная» (Customers) в приложении «Такси Фортуна» 
(Northwind). Для этого в окне База данных (Database) необходимо щелкнуть по ярлыку Формы (Forms), затем, 
используя панель инструментов, открыть окно Конструктор макросов (Macro Design) и перетащить с помощью мыши форму 
«Главная» (Customers) в поле «Макрокоманда» (Action) окна Конструктора макросов.
Для удобства перетаскивания объектов из окна База данных (Database) в форму можно выбрать команду Окно, 
Слева направо (Window, Tile Vertically), чтобы расположить окна на экране рядом.
Тогда в поле «Макрокоманда» (Action) автоматически появится макрокоманда Открыть Форму (OpenForm) (рисунок 17), 
а на панели аргументов автоматически заполнятся поля: в поле «Имя формы» (Form Name) появится имя формы «Главная» 
(Customers), в поле «Режим» (View) — значение по умолчанию Форма (Form), в поле «Режим окна» (Window Mode) — 
значение Обычное (Normal). Остальные поля останутся пустыми.

 
 
Рисунок 17 – Создание макроса

Кроме того, можно сделать записи в этой форме недоступными для изменений, для чего в поле Режим данных 
(Data Mode) необходимо ввести значение «только чтение» (Read Only).
Аналогично можно создавать макрокоманды, перетаскивая из окна База данных (Database) таблицы, запросы, 
отчеты и другие макросы. При этом в окне Конструктора макросов будут появляться соответствующие макрокоманды: 
Открыть Таблицу (ОрепТаblе), Открыть Запрос (OpenQuery), Открыть Отчет (OpenReport), Запуск Макроса(RunMacro).
Итак, база данных Такси создана. База очень проста в использовании и понятна для любых пользователей.

 
Заключение

Современные технологии разработки прикладных программ делают построение приложений фантастически дешевым и быстрым. 
Квалифицированный пользователь с помощью Microsoft Access сегодня может за один вечер создать на персональном 
компьютере то, что на ранних ЭВМ требовало месяцев работы (если это вообще было возможным). Кроме того, 
теперь стало значительно легче находить ошибки, устранять их и изменять проект непосредственно в процессе 
создания приложения.
Современные технологии позволяют создавать очень сложные приложения. К тому же скорость вычислений по сравнению даже 
с предыдущим десятилетием возросла на несколько порядков. Однако, несмотря на мощность средств разработки, если не 
потратить значительных усилий на определение задач и принципов работы приложения, то впоследствии придется потерять 
значительно больше времени на всевозможные переделки. Если проект приложения недостаточно продуман, то добавление 
новых функций или устранение недостатков связано с большими временными и финансовыми затратами.
Основные этапы разработки:
1.	Уточнение задач.
2.	Последовательность выполнения задач.
3.	Анализ данных.
4.	Определение структуры данных.
5.	Разработка макета приложения и пользовательского интерфейса.
6.	Создание приложения.
7.	Тестирование и усовершенствование.

 
Список литературы

1.	Бекаревич Ю., Пушкина Н. Microsoft Access за 21 занятие. – М.: Олма-Пресс, 2006. – 544с.
2.	Лори Ульрих Фуллер, Кен Кук, Джон Кауфельд. Microsoft Office Access 2007 для «чайников». – М.: Вильямс, 
2007. – 384с.
3.	Михеева В., Харитонова И. Microsoft Access 2003. – М.: Нова, 2005. – 1072с.
4.	Полупроводниковые приборы: диоды выпрямительные, тиристоры, оптоэлектронные приборы: справочник / под общ. 
ред. Н.Н. Горюнова. – 2-е изд., перераб. – М.: Энергоатомиздат, 1987. – 743с.
5.	Хомоненко А., Гридин В. В. Microsoft Access. Быстрый старт. – М.: Финансы и статистика, 2008. – 304с.
6.	Компакт-диск «Справочник по полупроводниковым приборам. В помощь радиолюбителю».
Размещено на Al
